// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
   //Not (in= nx, out=NOTnx);

   Mux16 (a=x, b=false, sel=zx, out=x0); // 0 as per zx
   
   Not16 (in=x0, out=flipx0);
   Mux16 (a=x0, b=flipx0, sel=nx, out=x1); // !x as per nx
   
   Mux16 (a=y, b=false, sel=zy, out=y0); // 0 as per zy
   
   Not16 (in=y0, out=flipy0);
   Mux16 (a=y0, b=flipy0, sel=ny, out=y1); // !y as per ny

   Add16 (a=x1, b=y1, out=x1ADDy1); 
   And16 (a=x1, b=y1, out=x1ANDy1);
   Mux16 (a=x1ANDy1, b=x1ADDy1, sel=f, out=fOut); // x&y or x+y as per f

   Not16 (in=fOut, out=flipfOut);
   Mux16 (a=fOut, b=flipfOut, sel=no, out=finalOut); // !fOut as per no
   
   Or16 (a=finalOut, b=finalOut, out=out); // out16
   
   Or16Way (in=finalOut, out=zeroOrOne); // if output is 0, zeroOrOne is 0
   Mux (a=true, b=false, sel=zeroOrOne, out=zr); // zr whether output is 0

   IsNeg16 (in=finalOut, out=negOrNot);
   Mux (a=false, b=true, sel=negOrNot, out=ng); // ng where output is -ive
   
}