// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    //    Mux16(a= , b= , sel= , out=);
    //    ARegister(in= , load= , out= );
    //    DRegister(in= , load= , out= );
    //    ALU(x= , y= , zx= , nx= , zy=  ,ny= ,f= , no=, out= , zr=, ng= );
    //    PC(in= , load= , inc= , reset=reset, out= );
    //  basic gates

    // C ins and A ins	
    Not(in=instruction[15], out=aIns);
    Mux16(a=ALUout, b=instruction, sel=aIns, out=insMUXout);

    And(a=instruction[15], b=instruction[12], out=selAorM); //if the bit is set, then writeA
    Or(a=aIns, b=instruction[5], out=loadA);

    ARegister(in=insMUXout, load=loadA, out=Aregout, out[0..14]=addressM);  //15 bits of the M reg come from here
    Mux16(a=Aregout, b=inM, sel=selAorM, out=AmuxM);
    

    //ALU logic
    ALU(x=Dregout , y=AmuxM , zx=instruction[11] , nx=instruction[10] , zy=instruction[9]  ,ny=instruction[8] ,f=instruction[7] , no=instruction[6], out=ALUout, out=outM, zr=ALUzr, ng=ALUng );
    
    And(a=instruction[4], b=instruction[15], out=loadD);
    DRegister(in=ALUout , load=loadD, out=Dregout);

    //Mux16(a=ALUout , b=instruction, sel= , out=ALUoutMUXins);
    //Mux16(a=Aregout , b=inM , sel= , out=AregoutMUXinM);

    //ALU dest
    And(a=instruction[3], b=instruction[15], out=writeM);

    Not(in=ALUng,out=pos);
    Not(in=ALUzr,out=nzr);
    And(a=instruction[15],b=instruction[0],out=JGT);
    And(a=pos,b=nzr,out=posnzr);
    And(a=JGT,b=posnzr,out=load1);

    And(a=instruction[15],b=instruction[1],out=JEQ);
    And(a=JEQ,b=ALUzr,out=load2);

    And(a=instruction[15],b=instruction[2],out=JLT);
    And(a=JLT,b=ALUng,out=load3);

    Or(a=load1,b=load2,out=loadtmp);
    Or(a=load3,b=loadtmp,out=jump);

    PC(in=Aregout,load=jump,inc=true,reset=reset,out[0..14]=pc);
    
}
